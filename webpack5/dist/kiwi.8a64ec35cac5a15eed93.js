(() => { "use strict"; var e = {}; function t(e) { return t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, t(e) } function r(e, t) { for (var r = 0; r < t.length; r++) { var o = t[r]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, n(o.key), o) } } function n(e) { var r = function (e, r) { if ("object" != t(e) || !e) return e; var n = e[Symbol.toPrimitive]; if (void 0 !== n) { var o = n.call(e, r || "default"); if ("object" != t(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === r ? String : Number)(e) }(e, "string"); return "symbol" == t(r) ? r : r + "" } e.p = ""; const o = function () { return e = function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) }, (t = [{ key: "render", value: function () { var e = document.createElement("text"); e.innerHTML = "Heading is awesome", document.querySelector("body").appendChild(e) } }]) && r(e.prototype, t), n && r(e, n), Object.defineProperty(e, "prototype", { writable: !1 }), e; var e, t, n }(), i = e.p + "5a4206fdc5a287667036.png"; function u(e) { return u = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, u(e) } function a(e, t) { for (var r = 0; r < t.length; r++) { var n = t[r]; n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, c(n.key), n) } } function c(e) { var t = function (e, t) { if ("object" != u(e) || !e) return e; var r = e[Symbol.toPrimitive]; if (void 0 !== r) { var n = r.call(e, t || "default"); if ("object" != u(n)) return n; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == u(t) ? t : t + "" } var f = function () { return e = function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) }, t = [{ key: "render", value: function () { var e = document.createElement("kiwi-image"); e.src = i, e.alt = "Kiwi Image", e.classList.add("kiwi"), document.querySelector("body").append(e) } }], t && a(e.prototype, t), r && a(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e; var e, t, r }(); const l = f; (new o).render(), (new l).render() })();